// <auto-generated />
using System;
using Chitter.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chitter.Migrations
{
    [DbContext(typeof(ChitterDbContext))]
    partial class ChitterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Chitter.Models.ChitPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChitPosts");
                });

            modelBuilder.Entity("Chitter.Models.ChitPostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChitPostCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ChitPostId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChitPostCommentId");

                    b.HasIndex("ChitPostId");

                    b.HasIndex("UserId");

                    b.ToTable("ChitPostComments");
                });

            modelBuilder.Entity("Chitter.Models.CommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChitPostCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChitPostCommentId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("Chitter.Models.PostLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChitPostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChitPostId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("Chitter.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Chitter.Models.ChitPost", b =>
                {
                    b.HasOne("Chitter.Models.User", "User")
                        .WithMany("ChitPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chitter.Models.ChitPostComment", b =>
                {
                    b.HasOne("Chitter.Models.ChitPostComment", null)
                        .WithMany("ChitPostComments")
                        .HasForeignKey("ChitPostCommentId");

                    b.HasOne("Chitter.Models.ChitPost", "ChitPost")
                        .WithMany("ChitPostComments")
                        .HasForeignKey("ChitPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chitter.Models.User", "User")
                        .WithMany("ChitPostComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChitPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chitter.Models.CommentLike", b =>
                {
                    b.HasOne("Chitter.Models.ChitPostComment", null)
                        .WithMany("CommentLikes")
                        .HasForeignKey("ChitPostCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chitter.Models.PostLike", b =>
                {
                    b.HasOne("Chitter.Models.ChitPost", null)
                        .WithMany("PostLikes")
                        .HasForeignKey("ChitPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chitter.Models.ChitPost", b =>
                {
                    b.Navigation("ChitPostComments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("Chitter.Models.ChitPostComment", b =>
                {
                    b.Navigation("ChitPostComments");

                    b.Navigation("CommentLikes");
                });

            modelBuilder.Entity("Chitter.Models.User", b =>
                {
                    b.Navigation("ChitPostComments");

                    b.Navigation("ChitPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
